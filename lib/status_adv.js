// Generated by CoffeeScript 1.12.7
(function() {
  var S, Status;

  module.exports = S = function(repo, options, callback) {
    return repo.git("status", options, function(err, stdout, stderr) {
      var status;
      status = new Status(repo);
      status.parse(stdout);
      return callback(err, status);
    });
  };

  S.Status = Status = (function() {
    function Status(repo1) {
      this.repo = repo1;
      this.regYourBranch = new RegExp(/Your branch/gi);
      this.regAhead = new RegExp(/Ahead/gi);
      this.regBehind = new RegExp(/Behind/gi);
      this.regDiverged = new RegExp(/Diverged/gi);
      this.regUpToDate = new RegExp(/up-to-date/gi);
      this.regCommitCount = new RegExp(/(?:by )(\w{1,4})(?: commit)/gi);
    }

    Status.prototype.getCommitCount = function(line) {
      var err, sub1;
      try {
        sub1 = line.match(this.regCommitCount);
        sub1 = sub1.toString().replace('by', '');
        sub1 = sub1.replace('commit', '');
        sub1 = sub1.trim();
        sub1 = parseInt(sub1);
      } catch (error) {
        err = error;
        console.log('Opps err', err);
      }
      return sub1;
    };

    Status.prototype.parse = function(text) {
      var i, len, line, ref;
      this.status = {};
      this.status.ahead = false;
      this.status.behind = false;
      this.status.diverged = false;
      this.status.upToDate = false;
      this.status.detected = false;
      this.status.commitCount = 0;
      this.clean = text.length === 0;
      ref = text.split("\n");
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        if (line.match(this.regYourBranch)) {
          if (line.match(this.regAhead)) {
            this.status.ahead = true;
            this.status.detected = true;
            this.status.commitCount = this.getCommitCount(line);
          }
          if (line.match(this.regBehind)) {
            this.status.behind = true;
            this.status.commitCount = this.getCommitCount(line);
          }
          if (line.match(this.regDiverged)) {
            this.status.diverged = true;
            this.status.detected = true;
          }
          if (line.match(this.regUpToDate)) {
            this.status.upToDate = true;
            this.status.detected = true;
          }
        }
      }
      return this.status;
    };

    return Status;

  })();

}).call(this);
